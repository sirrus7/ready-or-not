@tailwind base;
@tailwind components;
@tailwind utilities;

/* ============================================================================ */
/* MINIMAL CSS - NO COLOR OVERRIDES */
/* ============================================================================ */

/* Only keep styles that can't be done with Tailwind classes */

/* ===== LEADERBOARD SPECIFIC FIXES ===== */
/* Remove gradient text effects that cause invisibility */
.kpi-display p span.bg-gradient-to-r,
.kpi-display p .bg-gradient-to-r {
    background: none !important;
    -webkit-background-clip: initial !important;
    background-clip: initial !important;
    text-shadow: none !important;
}

/* ===== RESPONSIVE IMPROVEMENTS ===== */
@media (max-width: 768px) {
    .kpi-display {
        font-size: 14px;
    }

    .kpi-display .text-2xl {
        font-size: 1.5rem;
    }

    .kpi-display .text-xl {
        font-size: 1.25rem;
    }
}

/* ===== UTILITY CLASSES ===== */
/* Add any custom utilities that aren't available in Tailwind */

.backdrop-blur-sm {
    backdrop-filter: blur(4px);
}

/* ===== ANIMATION UTILITIES ===== */
/* Custom animations if needed */

@keyframes pulse {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.7;
    }
}

.animate-pulse {
    animation: pulse 1s ease-in-out infinite;
}

/* ===== 3D DICE ANIMATION ===== */
/* CSS variable for dice size */
:root {
    --dice-size: 50px;
}

@media (min-width: 768px) {
    :root {
        --dice-size: 60px;
    }
}

@media (min-width: 1024px) {
    :root {
        --dice-size: 80px;
    }
}

@media (min-width: 1280px) {
    :root {
        --dice-size: 100px;
    }
}

.dice-container {
    perspective: 300px;
    display: inline-block;
}

.dice-3d {
    position: relative;
    width: var(--dice-size);
    height: var(--dice-size);
    transform-style: preserve-3d;
    margin: 20px auto;
    transform: rotateX(-65deg) rotateY(25deg);
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.320, 1);
}

.dice-3d.rolling {
    animation: dice-simple-tumble 0.4s infinite linear;
}

.dice-face {
    position: absolute;
    width: var(--dice-size);
    height: var(--dice-size);
    background: rgba(220, 38, 38, 0.6);
    border: 1px solid rgba(153, 27, 27, 0.8);
    border-radius: 6px;
    box-shadow:
            inset 0 0 12px rgba(255,255,255,0.5),
            inset 0 0 6px rgba(255,255,255,0.3),
            0 3px 8px rgba(0,0,0,0.4);
    backdrop-filter: blur(2px);
}

/* Face positioning with responsive translateZ */
.dice-face.front { transform: rotateY(0deg) translateZ(calc(var(--dice-size) / 2)); }
.dice-face.back { transform: rotateY(180deg) translateZ(calc(var(--dice-size) / 2)); }
.dice-face.right { transform: rotateY(90deg) translateZ(calc(var(--dice-size) / 2)); }
.dice-face.left { transform: rotateY(-90deg) translateZ(calc(var(--dice-size) / 2)); }
.dice-face.top { transform: rotateX(90deg) translateZ(calc(var(--dice-size) / 2)); }
.dice-face.bottom { transform: rotateX(-90deg) translateZ(calc(var(--dice-size) / 2)); }

/* Rolling animation */
@keyframes dice-simple-tumble {
    0% { transform: rotateX(-65deg) rotateY(25deg); }
    25% { transform: rotateX(-65deg) rotateY(115deg); }
    50% { transform: rotateX(-65deg) rotateY(205deg); }
    75% { transform: rotateX(-65deg) rotateY(295deg); }
    100% { transform: rotateX(-65deg) rotateY(385deg); }
}

/* Responsive dot scaling */
.dice-face .absolute {
    width: calc(var(--dice-size) * 0.22);
    height: calc(var(--dice-size) * 0.22);
}

/* Scale dot positioning - this overrides the fixed Tailwind classes */
.dice-face .top-2 { top: calc(var(--dice-size) * 0.08); }
.dice-face .bottom-2 { bottom: calc(var(--dice-size) * 0.08); }
.dice-face .left-2 { left: calc(var(--dice-size) * 0.08); }
.dice-face .right-2 { right: calc(var(--dice-size) * 0.08); }
.dice-face .top-1\/2 { top: 50%; }
.dice-face .left-1\/2 { left: 50%; }

/* Scale the center positioning for dots */
.dice-face .transform.-translate-x-1\/2.-translate-y-1\/2 {
    transform: translate(-50%, -50%);
}

